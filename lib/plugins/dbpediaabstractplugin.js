// Generated by CoffeeScript 1.3.1
(function() {
	__bind = function(fn, me) {
		return function() {
			return fn.apply(me, arguments);
		};
	}, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
		for (var key in parent) {
			if (__hasProp.call(parent, key))
				child[key] = parent[key];
		}
		function ctor() {
			this.constructor = child;
		}


		ctor.prototype = parent.prototype;
		child.prototype = new ctor;
		child.__super__ = parent.prototype;
		return child;
	};

	window.DBPediaAbstractPlugin = (function(_super) {
		__extends(DBPediaAbstractPlugin, _super);

		DBPediaAbstractPlugin.name = 'DBPediaAbstractPlugin';

		function DBPediaAbstractPlugin() {
			return DBPediaAbstractPlugin.__super__.constructor.apply(this, arguments);
		}


		DBPediaAbstractPlugin.prototype.init = function() {
			var annotation, _i, _len, _ref, _results, _this = this;
			console.info("Initialize DBPediaAbstractPlugin");
			//console.info("annotations", this.lime.annotations);
			jQuery(this.lime).bind('timeupdate', function(e) {
			});
			_ref = this.lime.annotations;
			_results = [];
			for ( _i = 0, _len = _ref.length; _i < _len; _i++) {
				annotation = _ref[_i];
				jQuery(annotation).bind('becomeActive', function(e) {
					var domEl;
					//console.info(e.annotation, 'became active');
					if (annotation.resource.value.indexOf("geonames") < 0) {
						domEl = _this.lime.allocateWidgetSpace("DBPediaAbstractPlugin");
						if (domEl) {
							//domEl.html("<a href='#'>" + e.annotation.resource + "</a>");
							if (e.annotation.ldLoaded) {
								domEl.html(_this.renderAnnotation(e.annotation));
							} else {
								jQuery(e.annotation).bind('ldloaded', function(e2) {
									return domEl.html(_this.renderAnnotation(e.annotation));
								});
							}
							// insert widget click function
							domEl.click(function() {//click behaviour - highlight the related widgets by adding a class to them

								_this.lime.player.pause();
								_this.displayModal(e.annotation);
								
							});
															
							return e.annotation.widgets.DBPediaAbstractPlugin = domEl;
						} else {
						
							//debugger;
						}
					}
				});
				_results.push(jQuery(annotation).bind("becomeInactive", function(e) {
					//console.info(e.annotation, 'became inactive');
					e.annotation.widgets.DBPediaAbstractPlugin.remove();
					return
					delete e.annotation.widgets.DBPediaAbstractPlugin;
				}));
			}
			return _results;
		};

		DBPediaAbstractPlugin.prototype.renderAnnotation = function(annotation) {
			var depiction, label, page, props, _ref, _ref1, comment;
			//console.info("rendering", annotation);
			props = annotation.entity[annotation.resource.value];
			//console.log(props);
			label = _(props['http://www.w3.org/2000/01/rdf-schema#label']).detect(function(labelObj) {
				return labelObj.lang === 'en';
			}).value;
			//depiction = ( _ref = props['http://xmlns.com/foaf/0.1/depiction']) != null ? _ref[0].value :
			//void 0;
			page = ( _ref1 = props['http://xmlns.com/foaf/0.1/page']) != null ? _ref1[0].value :
			void 0;
			comment = _(props['http://dbpedia.org/ontology/abstract']).detect(function(abstractObj) {
				return abstractObj.lang === 'en';
			}).value;

			if (comment.length > 500) {
				comment = comment.substring(0, 500);
				var lastSpace = comment.lastIndexOf(" ");
				comment = comment.substring(0, lastSpace) + " ...";
			}
		//	console.log(props);
			//return;
			return "<div class=\"textAbstract\" style=\"background-color: red;\" >" + "<div id=\"text_canvas\" style=\"width: inherit; height: inherit; " + "background-image: linear-gradient(bottom, rgb(33,26,20) 32%, rgb(69,61,55) 66%, rgb(28,22,21) 15%); " + "background-image: -o-linear-gradient(bottom, rgb(33,26,20) 32%, rgb(69,61,55) 66%, rgb(28,22,21) 15%); " + "background-image: -moz-linear-gradient(bottom, rgb(33,26,20) 32%, rgb(69,61,55) 66%, rgb(28,22,21) 15%); " + "background-image: -webkit-linear-gradient(bottom, rgb(33,26,20) 32%, rgb(69,61,55) 66%, rgb(28,22,21) 15%); " + "background-image: -ms-linear-gradient(bottom, rgb(33,26,20) 32%, rgb(69,61,55) 66%, rgb(28,22,21) 15%); " + "background-image: -webkit-gradient(linear,left bottom, left top, color-stop(0.32, rgb(33,26,20)), color-stop(0.66, rgb(69,61,55)), color-stop(0.15, rgb(28,22,21))); " + "color: white; overflow:hidden; font-size: 14px;\">" + "<p style=\"text-align: left; margin: 5px;\">" + comment + "</p>" + "<table style=\" height: 27px; width: 90%; align:center;\">" + "<tr>" + "<td style=\" height: 27px;font-size: 16px; font-weight: bold; text-align:right; \">" + label + "</td>" + "<td style=\"text-align:left;\">" + "<img src=\"img/info.png\" style=\"width: 25px; height: 25px;\" />" + "</td>" + "</tr>" + "</table>" + "</div>" + "<div id=\"textBorder\" style=\"width: inherit; height: 10px; background-color: lightblue; bottom:1px;\"> &nbsp;</div>" + "</div>";

		};

		function showAbstractInModalWindow(annotation, modalContainer) {
		var	props = annotation.entity[annotation.resource.value];
			//console.log(props);
		 var   label = _(props['http://www.w3.org/2000/01/rdf-schema#label']).detect(function(labelObj) {
				return labelObj.lang === 'en';
			}).value;
			//depiction = ( _ref = props['http://xmlns.com/foaf/0.1/depiction']) != null ? _ref[0].value :
			//void 0;
		//	page = ( _ref1 = props['http://xmlns.com/foaf/0.1/page']) != null ? _ref1[0].value :
		//	void 0;
		var	comment = _(props['http://dbpedia.org/ontology/abstract']).detect(function(abstractObj) {
				return abstractObj.lang === 'en';
			}).value;

			var result = "<br><div id=\"text_canvas\" style=\"height: 100%; " + "color: white; overflow:hidden; font-size: 22px;\">"  + comment + "<br><br><table style=\" height: 27px; width: 90%; align:center;\">" + "<tr>" + "<td style=\"width: 50%; height: 27px;font-size: 24px; font-weight: bold; text-align:right; \">" + label + "</td>" + "<td style=\"text-align:left;\">" + "<img src=\"img/info.png\" style=\"width: 25px; height: 25px;\" />" + "</td>" + "</tr>" + "</table>" + "</div>" + "<div id=\"textBorder\" style=\"width: inherit; height: 10px; background-color: lightblue; bottom:1px;\"> &nbsp;</div>";
			var modalContent = $('#modalContent');
			//$(modalContent).append("<div style=\"margin: 10px; font-family:verdana; font-size:20px; color: white\">" + comment + "</div>");
			$(modalContent).append(result);
			
		}


		DBPediaAbstractPlugin.prototype.displayModal = function(annotation) {// Modal window script usin jquery

			// Get Modal Window
			//var modalcontainer;
			if (this.lime.player.isFullScreen) {
				modalcontainer = $('.modalwindow');
			} else {
				modalcontainer = $('#modalWindow');
			}

			// Get mask element
			var mask;
			if (this.lime.player.isFullScreen) {
				mask = $('.mask');
			} else {
				mask = $('#mask');
			}
			$(modalcontainer).css('height', "auto");
			$(modalcontainer).css('display', "inline-block");  
			$(modalcontainer).empty();
			$(modalcontainer).append("<a href=\"#\" class=\"close\" role=\"button\"><img src=\"img/close-icon.png\" style=\"width: 22px; height: 22px;\"/></a>");
			$(modalcontainer).append("<div id=\"modalContent\" style=\"width: 100%; position: relative; margin: 0 auto; \">");
			$(modalcontainer).append("</div>");
			

			//Get the screen height and width
			var maskHeight = $(window).height();
			var maskWidth = $(window).width();

			//Set heigth and width to mask to fill up the whole screen
			$(mask).css({
				'width' : maskWidth,
				'height' : maskHeight
			});

			//transition effect
			$(mask).fadeIn(100);
			$(mask).fadeTo("fast", 0.8);

			//Get the window height and width
			var winH = $(window).height();
			var winW = $(window).width();

			//Set the popup window to center
			$(modalcontainer).css('top', winH / 2 - $(modalcontainer).height() / 2);
			$(modalcontainer).css('left', winW / 2 - $(modalcontainer).width() / 2);

			//transition effect
			$(modalcontainer).fadeIn(100);

			//if close button is clicked
			$('.close').click(function(e) {
				//Cancel the link behavior
				e.preventDefault();
				$(mask).hide();
				$(modalcontainer).hide();
				$(modalcontainer).empty();
			});

			//if mask is clicked
			$(mask).click(function() {
				$(this).hide();
				$(modalcontainer).hide();
				$(modalcontainer).empty();
			});

			$(window).resize(function() {

				//Get the screen height and width
				var maskHeight = $(document).height();
				var maskWidth = $(document).width();

				//Set height and width to mask to fill up the whole screen
				$(mask).css({
					'width' : maskWidth,
					'height' : maskHeight
				});

				//Get the window height and width
				var winH = $(window).height();
				var winW = $(window).width();

				//Set the popup window to center
				$(modalcontainer).css('top', winH / 2 - $(modalcontainer).height() / 2);
				$(modalcontainer).css('left', winW / 2 - $(modalcontainer).width() / 2);
				//box.blur(function() { setTimeout(<bluraction>, 100); });

			});
			showAbstractInModalWindow(annotation,modalcontainer);
		}

		return DBPediaAbstractPlugin;

	})(window.LimePlugin);

}).call(this);
